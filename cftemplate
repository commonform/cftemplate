#!/usr/bin/env node
var argv = process.argv
if (argv.length < 3 || argv.length > 5) {
  process.stderr.write('Usage: cftemplate <input.cftemplate> [context.json [logic.js]]\n')
  process.exit(1)
} else {
  var cftemplate = require('./')
  var fs = require('fs')
  var path = require('path')
  var templateFile = argv[2]
  var contextFile = argv[3]
  var logicFile = argv[4]
  var context = { }
  if (contextFile) {
    try {
      var contextJSON = fs.readFileSync(contextFile)
    } catch (error) {
      process.stderr.write('Could not read ' + contextFile + '.\n')
      process.exit(1)
    }
    try {
      context = JSON.parse(contextJSON)
    } catch (error) {
      process.stderr.write('Invalid JSON.\n')
      process.exit(1)
    }
  }
  if (logicFile) {
    try { var businessLogic = require("./" + logicFile) }
    catch (error) { process.stderr.write('Could not read ' + logicFile + '.\n')
                    process.exit(1) }
    try { context = businessLogic(context) }
    catch (error) { process.stderr.write('Business logic in ' + logicFile +
                                         ' failed to extend ' +
                                         contextFile + ': ' + error + '\n')
                    process.exit(1) }
  }
  try {
    var template = fs.readFileSync(templateFile).toString()
  } catch (error) {
    process.stderr.write('Could not read template.\n')
    process.exit(1)
  }
  cftemplate(
    template,
    path.dirname(templateFile),
    context,
    function (error, output) {
      if (error) {
        throw error
      } else {
        process.stdout.write(output)
      }
    }
  )
}
